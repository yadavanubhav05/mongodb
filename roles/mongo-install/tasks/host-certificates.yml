# Generate certificates
- name: Capture if host private certificate exists
  stat:
    path: /tmp/mongo/{{ item }}.key
  loop: "{{ groups['mongodb'] }}"
  register: host_private_cert_exists

- name: Copy template
  template:
    src: host_rep_csr.conf.j2
    dest: /tmp/mongo/host_rep_csr.conf.{{ item }}.j2
    owner: root
    group: root
    mode: 0644
    backup: yes
  loop: "{{ groups['mongodb'] }}"

- name: Generate host private certificate
  shell: "openssl req -new -nodes -newkey rsa:4096 -keyout /tmp/mongo/{{ item }}.key -out /tmp/mongo/{{ item }}.csr < /tmp/mongo/host_rep_csr.conf.{{ item }}.j2"
  loop: "{{ groups['mongodb'] }}"
  # when:
  #   - host_private_cert_exists.stat.exists == true

- name: Check if host public certificates exist
  stat:
    path: "/tmp/mongo/{{ item }}.crt"
  loop: "{{ groups['mongodb'] }}"
  register: host_public_cert_exists

- name: Generate public certificates
  shell: "openssl x509 -CA /tmp/mongo/MongoCA.crt -CAkey /tmp/mongo/MongoCA.key -CAcreateserial -req -days 365 -in /tmp/mongo/{{ item }}.csr -out /tmp/mongo/{{ item }}.crt"
  loop: "{{ groups['mongodb'] }}"
  # when:
  #   - host_public_cert_exists.stat.exists == false

- name: Capture if host pem certificate exist
  stat:
    path: "/tmp/mongo/{{ item }}.pem"
  loop: "{{ groups['mongodb'] }}"
  register: host_pem_cert_exists

- name: Concatenate host key and crt
  shell: "cat /tmp/mongo/{{ item }}.key /tmp/mongo/{{ item }}.crt > /tmp/mongo/{{ item }}.pem"
  loop: "{{ groups['mongodb'] }}"
  # when:
  #   - host_pem_cert_exists.stat.exists == false

- name: get the file names
  shell: ls /tmp/mongo/
  register: file_names

- name: fetch certificates
  fetch:
    src: /tmp/mongo/{{ item }}
    dest: /tmp/mongo/
  with_items:
    - "{{ file_names.stdout_lines }}"
